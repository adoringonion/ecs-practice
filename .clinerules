# Clinerules

# 重要

- ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。
- 2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。
- 私は GitHubから学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。
- 反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。
- 複雑なコードを書かないように、適宜リファクタリングを行ってください。
  - 1ファイルにつき1クラスを原則として実装してください。
  - 適宜、フォルダ構成を整理してください。
  - メソッドを小さい粒度で分割してください。
  - クラスを小さい粒度で分割してください。
  - 変数のスコープを小さくしてください。
  - 数学的により短く書ける場合は、それを採用してください。
  - 副作用のない関数はstaticにしてください。
- 高度な数学、物理学、ローレベルの深い知識を用いて、適切に問題を分解、分析、解決してください。
  - また、常に物事をシンプルに考えましょう。YAGNI、KISSを意識してください。
- 問題が発生した場合は、自身の能力を過信せず、ロギングを仕込み、ステップバイステップで分析することで解決してください。
- 追記したほうが良いと思った情報があれば.Clinerulesに追記してください。
- イベント駆動型のプログラムを書く場合は、R3ライブラリのObserverパターンを使ってください。
- 非同期処理を書く場合はコルーチンをできるだけ使わず、R3やUniTaskを使ってください。
- ユニットテストをできるかぎり書いてください

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

## プロジェクト概要

- このプロジェクトはUnity ECSの練習のために作られたゲームです
- できる限りの部分をECSで書くようにしてください
- プレイヤーオブジェクトは、プレイヤーの入力を受け取り、それに応じて移動します
- モブオブジェクトは一定間隔でスポーンされて、ランダムに動き回ります
- プレイヤーオブジェクトは車のように動きます
- 一定方向に入力し続けるとプレイヤーオブジェクトは加速していきます
- 閾値以上のスピードでプレイヤーが向かってくるとモブオブジェクトは逃げ惑います
- プレイヤーがモブオブジェクトに衝突するとモブオブジェクトは吹っ飛びます
- モブオブジェクトは吹っ飛ぶと死亡し、一定時間後に消失します
